# Cell type
sec2_celltype_plot <- xySlidePlot(data = metadata_secs[[2]], title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1)
# Niche
sec2_niche_plot <- xySlidePlot(data = metadata_secs[[2]], title = "Cell Neighborhoods in Space",
colorBy = "niche",
size = size = 1, alpha = 1) +
# Cell type
sec2_celltype_plot <- xySlidePlot(data = metadata_secs[[2]], title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1)
# Niche
sec2_niche_plot <- xySlidePlot(data = metadata_secs[[2]], title = "Cell Neighborhoods in Space",
colorBy = "niche",
size = 1, alpha = 1) +
labs(color = "Cell Niche")
out_file <- paste(base_path, "celltype_sec2_slide1.png", sep="")
ggsave(out_file, plot = sec2_celltype_plot, dpi = 600, width = 300, height = 250, units = "mm")
out_file <- paste(base_path, "niche_sec2_slide1.png", sep="")
ggsave(out_file, plot = sec2_niche_plot, dpi = 600, width = 300, height = 250, units = "mm")
metadata_secs[[2]] %>% filter(cellType == "e") %>% summarise(mean(HIF1_pathway))
metadata_secs[[2]] %>% filter(cellType == "i") %>% summarise(mean(HIF1_pathway))
metadata_secs[[2]] %>% filter(cellType %in% c("e", "i")) %>% group_by(cellType) %>% summarise(mean(HIF1_pathway))
compare_by_celltype <- metadata_secs[[2]] %>% filter(cellType %in% c("e", "i")) %>% group_by(cellType)
cbct_means <- compare_by_celltype %>% summarise(mean(HIF1_pathway))
compare_by_celltype
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_jitter()
compare_by_celltype_plot
library(ggbeeswarm)
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_beeswarm(cex = 3)
compare_by_celltype_plot
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_beeswarm(cex = 5)
compare_by_celltype_plot
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_beeswarm()
compare_by_celltype_plot
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_beeswarm(priority = "density")
compare_by_celltype_plot
compare_by_celltype_plot <- ggplot(compare_by_celltype, aes(x=cellType, y=HIF1_pathway)) +
geom_boxplot() +
geom_quasirandom()
compare_by_celltype_plot
out_file <- paste(base_path, "celltype_comparison.png", sep="")
ggsave(out_file, plot = compare_by_celltype_plot, dpi = 600, width = 300, height = 600, units = "mm")
ggsave(out_file, plot = compare_by_celltype_plot, dpi = 600, width = 200, height = 500, units = "mm")
BiocManager::install("RBioFormats")
# Cell type
sec2_celltype_plot <- xySlidePlot(
data = metadata_secs[[2]],
title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1) +
theme_void
# Cell type
sec2_celltype_plot <- xySlidePlot(
data = metadata_secs[[2]],
title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1) +
theme_void()
sec2_celltype_plot
# Cell type
sec2_celltype_plot <- xySlidePlot(
data = metadata_secs[[2]],
title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1) +
theme_void() +
theme(
plot.title.position = "none"
)
sec2_celltype_plot
# Cell type
sec2_celltype_plot <- xySlidePlot(
data = metadata_secs[[2]],
title = "Cell Types in Space",
colorBy = "cellType", size = 1, alpha = 1) +
theme_void() +
theme(
plot.title = "none"
)
sec2_celltype_plot
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 1, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void()
sec2_hif2_plot
sec2_hif1_plot
pathway_name <- "HIF1_pathway"
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 1, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void()
sec2_hif1_plot
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 1, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void() +
theme(legend.position="none")
sec2_hif1_plot
out_file <- paste(base_path, "hif1_pathway_sec2_slide1_all.png", sep="")
ggsave(out_file, plot = sec2_hif1_plot, width = 21280, height = 21280, units = "px")
ggsave(out_file, plot = sec2_celltype_plot, dpi = 600, width = 300, height = 250, units = "mm", limitsize = FALSE)
out_file <- paste(base_path, "hif1_pathway_sec2_slide1_all.png", sep="")
ggsave(out_file, plot = sec2_hif1_plot, width = 21280, height = 21280, units = "px", limitsize = FALSE)
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 10, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void() +
theme(legend.position="none")
ggsave(out_file, plot = sec2_hif1_plot, width = 21280, height = 21280, units = "px", limitsize = FALSE)
section_of_interest <- metadata_secs[[2]]
View(section_of_interest)
section_of_interest %>% arrange(fov)
rownames(section_of_interest)
sapply(section_of_interest, strsplit("_"))
sapply(section_of_interest, strsplit(split="_"))
sapply(rownames(section_of_interest), strsplit(split="_"))
base::sapply(rownames(section_of_interest), strsplit(split="_"))
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(tmp[4])
}
fov_cell_id("c_1_39_235")
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(tmp[[4]][1])
}
fov_cell_id("c_1_39_235")
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(tmp)
}
fov_cell_id("c_1_39_235")
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(tmp[[1]][4])
}
fov_cell_id("c_1_39_235")
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(as.numeric(tmp[[1]][4]))
}
fov_cell_id("c_1_39_235")
sapply(rownames(section_of_interest), fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = fov_cell_id(rn)) %>% arrange(fov)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>% select(rn, fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>% select(rn, fov_cell_id) %>%
group_by(fov) %>% arragne(fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>% select(rn, fov_cell_id) %>%
group_by(fov) %>% arrange(fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>%
group_by(fov) %>% arrange(fov_cell_id) %>% select(rn, fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>%
group_by(fov) %>% arrange(fov, fov_cell_id) %>% select(rn, fov_cell_id)
section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>%
group_by(fov) %>% arrange(fov, fov_cell_id) %>% select(fov_cell_id, HIF1_pathway)
sorted_filtered_HIF1 <- section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>%
group_by(fov) %>% arrange(fov, fov_cell_id) %>% select(fov_cell_id, HIF1_pathway)
max(sorted_filtered_HIF1$HIF1_pathway)
256*256
39/(39/65536)
38/(39/65536)
10/(39/65536)
round(10/(39/65536))
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535)))
cval_max <- max(sorted_filtered_HIF1$HIF1_pathway)
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535)))
colormapa
colormap()
library(colormap)
colormap()
colormap(format = "rgb", colormap = c("blue", "red"), nshades = 65536)
colormap(format = "rgb", colormap = c("#0000FF", "#FF0000"), nshades = 65536)
custom_color <- colormap(format = "rgb", colormap = c("#0000FF", "#FF0000"), nshades = 65536)
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(R = custom_color[cval,1], G = custom_color[cval,2], B = = custom_color[cval,3])
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(R = custom_color[cval,1], G = custom_color[cval,2], B = custom_color[cval,3])
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = custom_color[cval,1], rgb_g = custom_color[cval,2], rgb_b = custom_color[cval,3])
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1]),
rgb_g = sapply(cval, function(x) custom_color[x,1]),
rgb_b = sapply(cval, function(x) custom_color[x,1]))
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) as.numeric(custom_color[x,1])),
rgb_g = sapply(cval, function(x) as.numeric(custom_color[x,2])),
rgb_b = sapply(cval, function(x) as.numeric(custom_color[x,3])))
custom_color[1,1]
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1]),
rgb_g = sapply(cval, function(x) custom_color[x,2]),
rgb_b = sapply(cval, function(x) custom_color[x,3]))
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1][1]),
rgb_g = sapply(cval, function(x) custom_color[x,2][1]),
rgb_b = sapply(cval, function(x) custom_color[x,3][1]))
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) unlist(custom_color[x,1])),
rgb_g = sapply(cval, function(x) unlist(custom_color[x,2])),
rgb_b = sapply(cval, function(x) unlist(custom_color[x,3]))
)
sorted_filtered_HIF1 %>% mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1][1]),
rgb_g = sapply(cval, function(x) custom_color[x,2][1]),
rgb_b = sapply(cval, function(x) custom_color[x,3][1])
)
sorted_filtered_color_HIF1 <- sorted_filtered_HIF1 %>%
mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1][1]),
rgb_g = sapply(cval, function(x) custom_color[x,2][1]),
rgb_b = sapply(cval, function(x) custom_color[x,3][1])
)
sorted_filtered_color_HIF1[is.na(sorted_filtered_color_HIF1)] <- 0
sorted_filtered_color_HIF1
base_path = "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/"
out_file <- paste(base_path, "hif1.csv", sep="")
write.csv(sorted_filtered_color_HIF1, out_file, row.names = FALSE)
View(custom_color)
image(1:nrow(custom_color), 1, as.matrix(1:nrow(ddf)),
col=custom_color,
xlab="", ylab = "", xaxt = "n", yaxt = "n", bty = "n")
image(custom_color)
tiledbURI <- "C:\Users\CEEL-PC-005\Desktop\Joon\CosMx_demo\atomx_data\Sample002\3f3200d9-ed7a-447d-ac38-e66f3389e8fc_TileDB"
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/Sample002/3f3200d9-ed7a-447d-ac38-e66f3389e8fc_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/Sample002/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/Sample002/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
gc()
# Attach packages
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(tiledb)
library(tiledbsc)
library(RColorBrewer)
################################################################################
#
# Nanostring provided plot function
#
################################################################################
colrs <- brewer.pal.info[brewer.pal.info$colorblind == TRUE, ]
colorSchemes <- c("PuOr", "Dark2", "Set2", "BrBG")
colrs <- colrs[colorSchemes,]
col_vec <- unique(unlist(mapply(brewer.pal, colrs$maxcolors, colorSchemes)))
col_vec <- col_vec[-grep(col_vec, pattern = "#F|#E|#D")]
plotting <- function(data, title, Xcol, Ycol, Xname, Yname, color,
size = 0.02, alpha = 0.05){
gp <- ggplot(data, aes(x = data[[Xcol]], y = data[[Ycol]],
color = data[[color]]))+
geom_point(size = size, alpha = alpha)+
coord_equal()+
labs(title = title, color = color,
x = Xname, y = Yname)+
scale_color_manual(values = col_vec)+
guides(colour = guide_legend(override.aes = list(size=1,
alpha=1)))
return(gp)
}
umapPlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "APPROXIMATEUMAP_1",
Ycol = "APPROXIMATEUMAP_2", Xname = "UMAP1",
Yname = "UMAP2", color = colorBy, ...))
}
pcaPlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "PCA_1",
Ycol = "PCA_2", Xname = "PCA_1",
Yname = "PCA_2", color = colorBy, ...))
}
xySlidePlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "x_slide_mm",
Ycol = "y_slide_mm", Xname = "x_slide_mm",
Yname = "y_slide_mm", color = colorBy, ...))
}
# Read CosMx Probe file
probe_file <-"C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/COSMXH_1-2.xlsx"
probe_data <- read_excel(probe_file,
sheet = "Annotations",
range = "A2:BS1012"
)
probe_summary <- read_excel(probe_file,
sheet = "Summary",
range = "A4:D72"
)
# Read tileDB data
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/new_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/atomx_data/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
tiledbURI <- "C:/Users/CEEL-PC-005/Desktop/CosMx_data/Sample002/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
gc()
tiledbURI <- "C:/Users/CEEL-PC-005/CosMx_data/Sample002/Sample002_TileDB/"
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
# First, let's just look whole slide image
cellCoords <- tiledb_scdataset$somas$RNA$obs$to_dataframe(
attrs = c("x_FOV_px", "y_FOV_px", "x_slide_mm", "y_slide_mm",
"slide_ID_numeric", "Run_Tissue_name", "fov"))
whole_slide <- ggplot(cellCoords, aes(x=x_slide_mm, y=y_slide_mm))+
geom_point(alpha = 0.05, size = 0.01)+
facet_wrap(~Run_Tissue_name)+
coord_equal()+
labs(title = "Cell coordinates in XY space")
whole_slide
# Attach packages
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(tiledb)
library(tiledbsc)
library(RColorBrewer)
################################################################################
#
# Nanostring provided plot function
#
################################################################################
colrs <- brewer.pal.info[brewer.pal.info$colorblind == TRUE, ]
colorSchemes <- c("PuOr", "Dark2", "Set2", "BrBG")
colrs <- colrs[colorSchemes,]
col_vec <- unique(unlist(mapply(brewer.pal, colrs$maxcolors, colorSchemes)))
col_vec <- col_vec[-grep(col_vec, pattern = "#F|#E|#D")]
plotting <- function(data, title, Xcol, Ycol, Xname, Yname, color,
size = 0.02, alpha = 0.05){
gp <- ggplot(data, aes(x = data[[Xcol]], y = data[[Ycol]],
color = data[[color]]))+
geom_point(size = size, alpha = alpha)+
coord_equal()+
labs(title = title, color = color,
x = Xname, y = Yname)+
scale_color_manual(values = col_vec)+
guides(colour = guide_legend(override.aes = list(size=1,
alpha=1)))
return(gp)
}
umapPlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "APPROXIMATEUMAP_1",
Ycol = "APPROXIMATEUMAP_2", Xname = "UMAP1",
Yname = "UMAP2", color = colorBy, ...))
}
pcaPlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "PCA_1",
Ycol = "PCA_2", Xname = "PCA_1",
Yname = "PCA_2", color = colorBy, ...))
}
xySlidePlot <- function(data, title, colorBy = "colorBy", ...){
return(plotting(data, title, Xcol = "x_slide_mm",
Ycol = "y_slide_mm", Xname = "x_slide_mm",
Yname = "y_slide_mm", color = colorBy, ...))
}
# Read CosMx Probe file
probe_file <-"C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_analysis/COSMXH_1-2.xlsx"
probe_data <- read_excel(probe_file,
sheet = "Annotations",
range = "A2:BS1012"
)
probe_summary <- read_excel(probe_file,
sheet = "Summary",
range = "A4:D72"
)
# Read tileDB data
cosmx_data_path <- "C:/Users/CEEL-PC-005/CosMx_data/"
atomx_output <- "Sample002"
tiledbURI <- paste(cosmx_data_path, atomx_output, "/", atomx_output, "_TileDB/", sep = "")
tiledb_scdataset <- tiledbsc::SOMACollection$new(uri = tiledbURI)
# First, let's just look whole slide image
cellCoords <- tiledb_scdataset$somas$RNA$obs$to_dataframe(
attrs = c("x_FOV_px", "y_FOV_px", "x_slide_mm", "y_slide_mm",
"slide_ID_numeric", "Run_Tissue_name", "fov"))
whole_slide <- ggplot(cellCoords, aes(x=x_slide_mm, y=y_slide_mm))+
geom_point(alpha = 0.05, size = 0.01)+
facet_wrap(~Run_Tissue_name)+
coord_equal()+
labs(title = "Cell coordinates in XY space")
whole_slide
# Make metadata data frame
metadata <- tiledb_scdataset$somas$RNA$obs$to_dataframe()
colnames(metadata)[2] <- "cellType"
colnames(metadata)[68] <- "niche"
tiledb_scdataset$somas
norm <- tiledb_scdataset$somas$RNA_normalized_554386b6.c0c8.4f34.ac0e.69be219f60d6_1$X$members$data$to_matrix()
# Get total number of fov
n_tot_fov <- max(metadata$fov)
# Define sections: HUMAN GUIDED PART
sections <- list(
c(1,96), c(97,111), c(112,164)
)
# Get HIF1 pathway genes from probe data
goi <- probe_data %>% filter(`HIF1 Signaling` == "+") %>% select(Gene)
goi <- goi$Gene
norm_df <- stack(norm[goi[1],]) %>% select(ind) %>%
mutate(cell_id = factor(ind, levels=rownames(metadata))) %>%
arrange(cell_id) %>% select(cell_id)
for (gene in goi){
gene_df <- stack(norm[gene,])
gene_df <- gene_df %>% mutate(cell_id = factor(ind, levels=rownames(metadata))) %>%
arrange(cell_id)
norm_df[[gene]] <- gene_df$value
}
norm_sum <- norm_df %>% mutate(sum_pathway = rowSums(across(where(is.numeric)),
na.rm = TRUE))
pathway_name <- "HIF1_pathway"
metadata[[pathway_name]] <- norm_sum$sum_pathway
################################################################################
################################################################################
# Divide metadata by sections
metadata_secs <- list()
for (i in 1:length(sections)){
metadata_secs[[length(metadata_secs)+1]] = metadata[metadata$fov %in% sections[[i]],]
}
sec1_hif1_plot <- ggplot(metadata_secs[[1]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 1, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red")
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 10, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void() +
theme(legend.position="none")
sec1_hif1_plot
View(metadata_secs)
# Define sections: HUMAN GUIDED PART
sections <- list(
c(1,96), c(97,111), c(112,164)
)
norm_df <- stack(norm[goi[1],]) %>% select(ind) %>%
mutate(cell_id = factor(ind, levels=rownames(metadata))) %>%
arrange(cell_id) %>% select(cell_id)
for (gene in goi){
gene_df <- stack(norm[gene,])
gene_df <- gene_df %>% mutate(cell_id = factor(ind, levels=rownames(metadata))) %>%
arrange(cell_id)
norm_df[[gene]] <- gene_df$value
}
norm_sum <- norm_df %>% mutate(sum_pathway = rowSums(across(where(is.numeric)),
na.rm = TRUE))
pathway_name <- "HIF1_pathway"
metadata[[pathway_name]] <- norm_sum$sum_pathway
View(metadata)
View(metadata_secs)
sections[[1]]
# Define sections: HUMAN GUIDED PART
sections <- list(
c(1:96), c(97:111), c(112:164)
)
################################################################################
################################################################################
# Divide metadata by sections
metadata_secs <- list()
for (i in 1:length(sections)){
metadata_secs[[length(metadata_secs)+1]] = metadata[metadata$fov %in% sections[[i]],]
}
sec1_hif1_plot <- ggplot(metadata_secs[[1]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 1, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red")
sec2_hif1_plot <- ggplot(metadata_secs[[2]], aes(x=x_slide_mm, y=y_slide_mm, color=.data[[pathway_name]])) +
geom_point(size = 10, alpha = 1) +
coord_equal() +
scale_color_gradient(low = "blue", high = "red") +
theme_void() +
theme(legend.position="none")
sec1_hif1_plot
fov_cell_id <- function(x) {
tmp <- strsplit(x, split = "_")
return(as.numeric(tmp[[1]][4]))
}
section_of_interest <- metadata_secs[[1]]
sorted_filtered_HIF1 <- section_of_interest %>% rownames_to_column("rn") %>%
mutate(fov_cell_id = sapply(rn, fov_cell_id)) %>% arrange(fov) %>%
group_by(fov) %>% arrange(fov, fov_cell_id) %>% select(fov_cell_id, HIF1_pathway)
cval_max <- max(sorted_filtered_HIF1$HIF1_pathway)
custom_color <- colormap(format = "rgb", colormap = c("#0000FF", "#FF0000"), nshades = 65536)
sorted_filtered_color_HIF1 <- sorted_filtered_HIF1 %>%
mutate(cval = round(HIF1_pathway/(cval_max/65535))) %>%
mutate(rgb_r = sapply(cval, function(x) custom_color[x,1][1]),
rgb_g = sapply(cval, function(x) custom_color[x,2][1]),
rgb_b = sapply(cval, function(x) custom_color[x,3][1])
)
sorted_filtered_color_HIF1[is.na(sorted_filtered_color_HIF1)] <- 0
base_path = "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_demo/"
out_file <- paste(base_path, "Sample002_hif1.csv", sep="")
write.csv(sorted_filtered_color_HIF1, out_file, row.names = FALSE)
base_path = "C:/Users/CEEL-PC-005/Desktop/Joon/CosMx_analysis/"
out_file <- paste(base_path, "Sample002_hif1.csv", sep="")
write.csv(sorted_filtered_color_HIF1, out_file, row.names = FALSE)
